1. 

npm install @apollo/client graphql
npm install @vue/apollo-composable



touch apollo-client.js








<template>
  <div>
    <h1>GraphQL Data</h1>
    <div v-if="loading">Loading...</div>
    <div v-else-if="error">Error: {{ error.message }}</div>
    <div v-else>
      <h2>User Details</h2>
      <ul>
        <li>ID: {{ user.id }}</li>
        <li>Name: {{ user.name }}</li>
        <li>Email: {{ user.email }}</li>
      </ul>
    </div>
  </div>
</template>

<script setup>
import { computed } from 'vue';
import { useQuery } from '@vue/apollo-composable';
import { gql } from '@apollo/client';

// Define the GraphQL query
const GET_USER = gql`
  query {
    getUser(id: 1) {
      id
      name
      email
    }
  }
`;

// Execute the query using Apollo
const { result: data, loading, error } = useQuery(GET_USER);

// Extract the user data from the result
const user = computed(() => data?.value?.getUser);
</script>






main.js 

import { createApp } from 'vue';
import App from './App.vue';
import router from './router';
import apolloClient from './lib/apollo-client';
import { provideApolloClient } from '@vue/apollo-composable';

const app = createApp(App);

// Provide Apollo Client globally
provideApolloClient(apolloClient);

app.use(router).mount('#app');




apollo-client.js

import { ApolloClient, InMemoryCache } from '@apollo/client';

const graphqlEndpoint = 'http://127.0.0.1:8000/graphql';

const apolloClient = new ApolloClient({
  uri: graphqlEndpoint,
  cache: new InMemoryCache(),
});

export default apolloClient;